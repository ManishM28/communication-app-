{
  "v3qec6": [
    {
      "text": "hi every one good morning",
      "time": "2025-08-14T14:35:16.453Z"
    },
    {
      "text": "hi hello good after noon",
      "time": "2025-08-14T14:35:35.047Z"
    },
    {
      "text": "<!DOCTYPE html> <html> <head>     <title>Room Chat</title>     <style>         body { font-family: Arial; background: #f4f4f4; text-align: center; }         input, button { padding: 10px; margin: 5px; }         #chat-box { border: 1px solid #ccc; height: 300px; overflow-y: scroll; background: #fff; padding: 10px; margin: 20px auto; width: 60%; }     </style> </head> <body>     <h1>ðŸ’¬ Room Chat</h1>     <div id=\"setup\">         <input type=\"text\" id=\"roomId\" placeholder=\"Enter Room ID\">         <button onclick=\"joinRoom()\">Join Room</button>         <button onclick=\"createRoom()\">Create Room</button>     </div>     <div id=\"chat\" style=\"display:none;\">         <h2>Room: <span id=\"roomName\"></span></h2>         <div id=\"chat-box\"></div>         <input type=\"text\" id=\"msg\" placeholder=\"Type message...\">         <button onclick=\"sendMessage()\">Send</button>     </div>     <script src=\"/socket.io/socket.io.js\"></script>     <script>         const socket = io();         let currentRoom = \"\";          function createRoom() {             currentRoom = Math.random().toString(36).substring(2, 8);             startChat(currentRoom);         }          function joinRoom() {             const room = document.getElementById(\"roomId\").value.trim();             if (room) startChat(room);         }          function startChat(roomId) {             currentRoom = roomId;             document.getElementById(\"roomName\").innerText = roomId;             document.getElementById(\"setup\").style.display = \"none\";             document.getElementById(\"chat\").style.display = \"block\";             socket.emit(\"joinRoom\", roomId);              // Show previous messages             socket.on(\"previousMessages\", (msgs) => {                 const chatBox = document.getElementById(\"chat-box\");                 chatBox.innerHTML = \"\";                 msgs.forEach(m => {                     chatBox.innerHTML += `<p>[${new Date(m.time).toLocaleTimeString()}] ${m.text}</p>`;                 });                 chatBox.scrollTop = chatBox.scrollHeight;             });              // Show new messages             socket.on(\"message\", (msg) => {                 const chatBox = document.getElementById(\"chat-box\");                 chatBox.innerHTML += `<p>[${new Date(msg.time).toLocaleTimeString()}] ${msg.text}</p>`;                 chatBox.scrollTop = chatBox.scrollHeight;             });         }          function sendMessage() {             const msg = document.getElementById(\"msg\").value;             if (msg) {                 socket.emit(\"message\", { roomId: currentRoom, message: msg });                 document.getElementById(\"msg\").value = \"\";             }         }     </script> </body> </html>",
      "time": "2025-08-14T14:35:41.598Z"
    }
  ],
  "8du72j": [],
  "2f6tv8": [],
  "aipua5": [
    {
      "text": "{   \"v3qec6\": [     {       \"text\": \"hi every one good morning\",       \"time\": \"2025-08-14T14:35:16.453Z\"     },     {       \"text\": \"hi hello good after noon\",       \"time\": \"2025-08-14T14:35:35.047Z\"     },     {       \"text\": \"<!DOCTYPE html> <html> <head>     <title>Room Chat</title>     <style>         body { font-family: Arial; background: #f4f4f4; text-align: center; }         input, button { padding: 10px; margin: 5px; }         #chat-box { border: 1px solid #ccc; height: 300px; overflow-y: scroll; background: #fff; padding: 10px; margin: 20px auto; width: 60%; }     </style> </head> <body>     <h1>ðŸ’¬ Room Chat</h1>     <div id=\\\"setup\\\">         <input type=\\\"text\\\" id=\\\"roomId\\\" placeholder=\\\"Enter Room ID\\\">         <button onclick=\\\"joinRoom()\\\">Join Room</button>         <button onclick=\\\"createRoom()\\\">Create Room</button>     </div>     <div id=\\\"chat\\\" style=\\\"display:none;\\\">         <h2>Room: <span id=\\\"roomName\\\"></span></h2>         <div id=\\\"chat-box\\\"></div>         <input type=\\\"text\\\" id=\\\"msg\\\" placeholder=\\\"Type message...\\\">         <button onclick=\\\"sendMessage()\\\">Send</button>     </div>     <script src=\\\"/socket.io/socket.io.js\\\"></script>     <script>         const socket = io();         let currentRoom = \\\"\\\";          function createRoom() {             currentRoom = Math.random().toString(36).substring(2, 8);             startChat(currentRoom);         }          function joinRoom() {             const room = document.getElementById(\\\"roomId\\\").value.trim();             if (room) startChat(room);         }          function startChat(roomId) {             currentRoom = roomId;             document.getElementById(\\\"roomName\\\").innerText = roomId;             document.getElementById(\\\"setup\\\").style.display = \\\"none\\\";             document.getElementById(\\\"chat\\\").style.display = \\\"block\\\";             socket.emit(\\\"joinRoom\\\", roomId);              // Show previous messages             socket.on(\\\"previousMessages\\\", (msgs) => {                 const chatBox = document.getElementById(\\\"chat-box\\\");                 chatBox.innerHTML = \\\"\\\";                 msgs.forEach(m => {                     chatBox.innerHTML += `<p>[${new Date(m.time).toLocaleTimeString()}] ${m.text}</p>`;                 });                 chatBox.scrollTop = chatBox.scrollHeight;             });              // Show new messages             socket.on(\\\"message\\\", (msg) => {                 const chatBox = document.getElementById(\\\"chat-box\\\");                 chatBox.innerHTML += `<p>[${new Date(msg.time).toLocaleTimeString()}] ${msg.text}</p>`;                 chatBox.scrollTop = chatBox.scrollHeight;             });         }          function sendMessage() {             const msg = document.getElementById(\\\"msg\\\").value;             if (msg) {                 socket.emit(\\\"message\\\", { roomId: currentRoom, message: msg });                 document.getElementById(\\\"msg\\\").value = \\\"\\\";             }         }     </script> </body> </html>\",       \"time\": \"2025-08-14T14:35:41.598Z\"     }   ] }",
      "time": "2025-08-14T14:37:19.762Z"
    }
  ],
  "QACX9L": [
    {
      "text": "hi",
      "time": "2025-08-14T14:43:46.996Z"
    },
    {
      "text": "socket.on(\"leaveRoom\", (roomId) => {     socket.leave(roomId);     console.log(`User left room: ${roomId}`); });",
      "time": "2025-08-14T14:44:10.859Z"
    },
    {
      "text": "socket.on(\"leaveRoom\", (roomId) => {     socket.leave(roomId);     console.log(`User left room: ${roomId}`); });",
      "time": "2025-08-14T14:44:20.124Z"
    },
    {
      "text": "const express = require(\"express\"); const fs = require(\"fs\"); const path = require(\"path\"); const app = express(); const http = require(\"http\").createServer(app); const io = require(\"socket.io\")(http);  app.use(express.static(\"public\")); // Serve frontend  const messagesFile = path.join(__dirname, \"messages.json\"); let messages = {};  // Load message history if (fs.existsSync(messagesFile)) {     messages = JSON.parse(fs.readFileSync(messagesFile)); }  // Save messages to file function saveMessages() {     fs.writeFileSync(messagesFile, JSON.stringify(messages, null, 2)); }  io.on(\"connection\", (socket) => {     console.log(\"A user connected\");      socket.on(\"joinRoom\", (roomId) => {         socket.join(roomId);         console.log(`User joined room: ${roomId}`);          // Send all messages for that room         if (messages[roomId]) {             socket.emit(\"previousMessages\", messages[roomId]);         } else {             messages[roomId] = [];         }     });      socket.on(\"message\", ({ roomId, message }) => {         const newMsg = { text: message, time: new Date().toISOString() };          if (!messages[roomId]) messages[roomId] = [];         messages[roomId].push(newMsg); // âœ… unlimited messages          saveMessages();         io.to(roomId).emit(\"message\", newMsg);     });      socket.on(\"leaveRoom\", (roomId) => {         socket.leave(roomId);         console.log(`User left room: ${roomId}`);     });      socket.on(\"disconnect\", () => {         console.log(\"A user disconnected\");     }); });  http.listen(3000, () => console.log(\"âœ… Server running on http://localhost:3000\"));",
      "time": "2025-08-14T14:44:49.523Z"
    }
  ]
}